import{_ as p,C as r,c as o,o as d,G as i,am as l,j as s,w as t,a}from"./chunks/framework.DAr4A1sI.js";const f=JSON.parse('{"title":"SimpleFunctionWrapper class","description":"","frontmatter":{"order":2,"authors":["JorelAli"],"title":"SimpleFunctionWrapper class"},"headers":[],"relativePath":"create-commands/functions-and-tags/simple-function-wrapper.md","filePath":"en/create-commands/functions-and-tags/simple-function-wrapper.md","lastUpdated":1742050500000}'),h={name:"create-commands/functions-and-tags/simple-function-wrapper.md"};function c(k,e,m,u,g,E){const n=r("TitleAnchor");return d(),o("div",null,[i(n,{anchor:"the-simple-function-wrapper-class"},{default:t(()=>e[0]||(e[0]=[s("h1",{id:"the-simple-function-wrapper-class",tabindex:"-1"},[a("The SimpleFunctionWrapper class "),s("a",{class:"header-anchor",href:"#the-simple-function-wrapper-class","aria-label":'Permalink to "The SimpleFunctionWrapper class"'},"​")],-1)])),_:1}),e[6]||(e[6]=l('<p>To represent Minecraft functions and tags, the CommandAPI uses the <code>SimpleFunctionWrapper</code> class. Simply put, this class represents <em>one</em> Minecraft function, which are defined in <code>.mcfunction</code> files.</p><div class="info custom-block"><p class="custom-block-title"><strong>Developer&#39;s Note:</strong></p><p>The <code>SimpleFunctionWrapper</code> class represents a Minecraft function. In order to represent a Minecraft &quot;tag&quot;, which is a collection of Minecraft functions, the CommandAPI simply uses a <code>SimpleFunctionWrapper[]</code>.</p></div>',2)),i(n,{anchor:"simple-function-wrapper-methods"},{default:t(()=>e[1]||(e[1]=[s("h2",{id:"simple-function-wrapper-methods",tabindex:"-1"},[a("SimpleFunctionWrapper methods "),s("a",{class:"header-anchor",href:"#simple-function-wrapper-methods","aria-label":'Permalink to "SimpleFunctionWrapper methods"'},"​")],-1)])),_:1}),e[7]||(e[7]=l(`<p>The <code>SimpleFunctionWrapper</code> class has the following methods:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SimpleFunctionWrapper</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Keyed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Methods that creates SimpleFunctionWrapper instances</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SimpleFunctionWrapper </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(NamespacedKey </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SimpleFunctionWrapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(NamespacedKey </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Methods that query the Minecraft server</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Set&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NamespacedKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getFunctions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Set&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NamespacedKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Methods for using the SimpleFunctionWrapper</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CommandSender </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sender</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Utility functions</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCommands</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    NamespacedKey </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,2)),i(n,{anchor:"get-tag-namespaced-key-and-get-function-namespaced-key"},{default:t(()=>e[2]||(e[2]=[s("h3",{id:"get-tag-namespaced-key-and-get-function-namespaced-key",tabindex:"-1"},[s("code",null,"getTag(NamespacedKey)"),a(" and "),s("code",null,"getFunction(NamespacedKey)"),a(),s("a",{class:"header-anchor",href:"#get-tag-namespaced-key-and-get-function-namespaced-key","aria-label":'Permalink to "`getTag(NamespacedKey)` and `getFunction(NamespacedKey)`"'},"​")],-1)])),_:1}),e[8]||(e[8]=s("p",null,[a("The "),s("code",null,"getFunction(NamespacedKey)"),a(" function is used to get a function that has been declared in a datapack and is loaded on the server.")],-1)),e[9]||(e[9]=s("p",null,[a("The "),s("code",null,"getTag(NamespacedKey)"),a(" function is used to get a Tag that has been declared in a datapack and is loaded on the server. This returns a "),s("code",null,"SimpleFunctionWrapper[]"),a(", since a tag is simply an ordered collection of functions. When using this method, the "),s("code",null,"#"),a(" symbol which is typically used at the start of the tag's name "),s("em",null,"is not needed"),a(".")],-1)),i(n,{anchor:"get-functions-and-get-tags"},{default:t(()=>e[3]||(e[3]=[s("h3",{id:"get-functions-and-get-tags",tabindex:"-1"},[s("code",null,"getFunctions()"),a(" and "),s("code",null,"getTags()"),a(),s("a",{class:"header-anchor",href:"#get-functions-and-get-tags","aria-label":'Permalink to "`getFunctions()` and `getTags()`"'},"​")],-1)])),_:1}),e[10]||(e[10]=s("p",null,[a("The methods "),s("code",null,"getFunctions()"),a(" and "),s("code",null,"getTags()"),a(" simply return a set of "),s("code",null,"NamespacedKey"),a(" objects which are the names of functions or tags that have been declared by all datapacks on the server.")],-1)),i(n,{anchor:"run-command-sender"},{default:t(()=>e[4]||(e[4]=[s("h3",{id:"run-command-sender",tabindex:"-1"},[s("code",null,"run(CommandSender)"),a(),s("a",{class:"header-anchor",href:"#run-command-sender","aria-label":'Permalink to "`run(CommandSender)`"'},"​")],-1)])),_:1}),e[11]||(e[11]=l('<div class="danger custom-block"><p class="custom-block-title"><code>run(CommandSender)</code> support in 1.20.3+</p><p>As of CommandAPI 9.3.0 (compatible with Minecraft versions 1.20.3 and 1.20.4), calling <code>run(CommandSender)</code> will always return a value of <code>1</code>, regardless of whether the command succeeds, fails, or returns a result.</p></div><p>This method simply runs the current <code>SimpleFunctionWrapper</code> as the provided command sender. The method will return a numerical result value, stating whether it succeeds or returns a result. This is documented in more detail <a href="./../executors/normal-executors">here</a> and <a href="./../executors/resulting-executors">here</a>. For example:</p>',2)),i(n,{anchor:"get-commands"},{default:t(()=>e[5]||(e[5]=[s("h3",{id:"get-commands",tabindex:"-1"},[s("code",null,"getCommands()"),a(),s("a",{class:"header-anchor",href:"#get-commands","aria-label":'Permalink to "`getCommands()`"'},"​")],-1)])),_:1}),e[12]||(e[12]=l('<div class="danger custom-block"><p class="custom-block-title"><code>getCommands()</code> support in 1.20.3+</p><p>As of CommandAPI 9.3.0 (compatible with Minecraft versions 1.20.3 and 1.20.4), calling <code>getCommands()</code> will always return an empty <code>String[]</code>. At the time of writing, it is not possible to extract the function command list in 1.20.3+.</p></div><p>The <code>getCommands()</code> method returns a <code>String[]</code> that contains the list of commands that the Minecraft function &quot;holds&quot;. In other words, running this Minecraft function is as simple as iterating through its commands and running them in order. The commands that this <code>String[]</code> holds are the raw strings that this function represents - in other words, it can include things such as <code>@p</code> and <code>~ ~ ~</code> instead of &quot;filled in&quot; values.</p>',2))])}const F=p(h,[["render",c]]);export{f as __pageData,F as default};
