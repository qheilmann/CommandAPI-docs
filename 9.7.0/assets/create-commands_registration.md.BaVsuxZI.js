import{_ as k,C as l,c as o,o as r,G as e,j as s,am as h,w as t,a}from"./chunks/framework.DAr4A1sI.js";const v=JSON.parse('{"title":"Command registration","description":"","frontmatter":{"order":1,"authors":["DerEchtePilz","willkroboth","JorelAli","Abelkrijgtalles"]},"headers":[],"relativePath":"create-commands/registration.md","filePath":"en/create-commands/registration.md","lastUpdated":1742050500000}'),E={name:"create-commands/registration.md"};function g(m,i,c,y,u,C){const n=l("TitleAnchor"),d=l("PluginTabsTab"),p=l("PluginTabs");return r(),o("div",null,[e(n,{anchor:"command-registration"},{default:t(()=>i[0]||(i[0]=[s("h1",{id:"command-registration",tabindex:"-1"},[a("Command registration "),s("a",{class:"header-anchor",href:"#command-registration","aria-label":'Permalink to "Command registration"'},"â€‹")],-1)])),_:1}),i[9]||(i[9]=s("p",null,[a("To register commands with the CommandAPI, we use the "),s("code",null,"CommandAPICommand"),a(" class. It follows a simple builder pattern to improve readability.")],-1)),i[10]||(i[10]=s("p",null,"I think the easiest way to explain it is with an example:",-1)),e(p,{sharedStateKey:"tabs-2"},{default:t(()=>[e(d,{label:"Java"},{default:t(()=>i[1]||(i[1]=[s("div",{class:"language-java vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"java"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// Create our command")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"new"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," CommandAPICommand"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"broadcastmsg"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withArguments"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"new"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," GreedyStringArgument"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"message"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")) "),s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// The arguments")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withAliases"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"broadcast"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"broadcastmessage"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")       "),s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// Command aliases")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withPermission"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(CommandPermission.OP)               "),s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// Required permissions")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"executes"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"((sender, args) "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"->"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        String message "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," (String) args."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"get"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"message"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},");")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        Bukkit."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"getServer"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"broadcastMessage"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(message);")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    })")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"register"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")])])])],-1)])),_:1}),e(d,{label:"Kotlin"},{default:t(()=>i[2]||(i[2]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// Create our command")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"CommandAPICommand"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"broadcastmsg"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withArguments"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"GreedyStringArgument"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"message"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")) "),s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// The arguments")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withAliases"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"broadcast"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"broadcastmessage"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")   "),s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// Command aliases")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withPermission"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(CommandPermission.OP)           "),s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// Required permissions")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"executes"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"CommandExecutor"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," { sender, args "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"->")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        val"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," message "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," args["),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"message"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"] "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"as"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," String")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        Bukkit."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"getServer"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"broadcastMessage"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(message)")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    })")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"register"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")])])])],-1)])),_:1})]),_:1}),i[11]||(i[11]=h('<ul><li><p>First, we create a new <code>CommandAPICommand</code>, with the name of the command that the sender must enter to run it.</p></li><li><p>Then, we create an argument to add to the command using <code>withArguments</code>. This is described in more detail in <a href="./arguments/arguments">the section on arguments</a>.</p></li><li><p>In this example, we add an alias, &quot;broadcast&quot;, to the command. This allows the sender to use either <code>/broadcastmsg &lt;message&gt;</code> or <code>/broadcast &lt;message&gt;</code>.</p></li><li><p>By using <code>withPermission</code>, we require the sender to be an OP in order to run the command.</p></li><li><p>We control what the command does using <code>executes</code> (this is described in more detail in <a href="./executors/command-executors">the section on command executors</a>).</p></li><li><p>Finally, we register the command to the CommandAPI using <code>register</code>.</p></li></ul><p>That&#39;s it! This simple snippet of code fully registers the command to the server. You don&#39;t need to supply a plugin instance, you don&#39;t have to create a custom class and you don&#39;t have to mess with the <code>plugin.yml</code> file.</p><p>Throughout this documentation, we will use the various different methods for command registration to give you an idea of when and where certain methods are more suitable than others.</p>',3)),e(n,{anchor:"command-api-command-methods"},{default:t(()=>i[3]||(i[3]=[s("h2",{id:"command-api-command-methods",tabindex:"-1"},[s("code",null,"CommandAPICommand"),a(" methods "),s("a",{class:"header-anchor",href:"#command-api-command-methods","aria-label":'Permalink to "`CommandAPICommand` methods"'},"â€‹")],-1)])),_:1}),i[12]||(i[12]=s("p",null,[a("The "),s("code",null,"CommandAPICommand"),a(" has various methods, which are outlined below:")],-1)),e(n,{anchor:"setting-the-command-name"},{default:t(()=>i[4]||(i[4]=[s("h4",{id:"setting-the-command-name",tabindex:"-1"},[a("Setting the command name "),s("a",{class:"header-anchor",href:"#setting-the-command-name","aria-label":'Permalink to "Setting the command name"'},"â€‹")],-1)])),_:1}),i[13]||(i[13]=h('<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CommandAPICommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String commandName)</span></span></code></pre></div><p>This constructor creates a new instance of the <code>CommandAPICommand</code> object. This constructor requires the <em>name</em> of the command.</p>',2)),e(n,{anchor:"setting-command-properties"},{default:t(()=>i[5]||(i[5]=[s("h4",{id:"setting-command-properties",tabindex:"-1"},[a("Setting command properties "),s("a",{class:"header-anchor",href:"#setting-command-properties","aria-label":'Permalink to "Setting command properties"'},"â€‹")],-1)])),_:1}),i[14]||(i[14]=h(`<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CommandAPICommand </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withArguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Argument</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arguments)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CommandAPICommand </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withArguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Argument... arguments)</span></span></code></pre></div><p>The <code>withArguments</code> method is used to add arguments to your command. The <code>arguments</code> parameter is appended to the list of arguments for the command.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CommandAPICommand </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withPermission</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CommandPermission)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CommandAPICommand </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withPermission</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String)</span></span></code></pre></div><p>The <code>withPermission</code> method is used to assign a permission that is required to execute the command. (See <a href="./permissions">the section on permissions</a> for more info).</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CommandAPICommand </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withRequirements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sender </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {})</span></span></code></pre></div><p>The <code>withRequirements</code> method is used to assign additional constraints required to execute the command, similar to permissions. (See <a href="./requirements">the section on requirements</a> for more info).</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CommandAPICommand </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withAliases</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String... args)</span></span></code></pre></div><p>The <code>withAliases</code> method is used to declare a list of aliases that can be used to run this command via. (See <a href="./aliases">the section on aliases</a> for more info).</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CommandAPICommand </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withHelp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String shortDescription, fullDescription)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CommandAPICommand </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withHelp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HelpTopic helpTopic)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CommandAPICommand </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withShortDescription</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String shortDescription)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CommandAPICommand </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withFullDescription</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String fullDescription)</span></span></code></pre></div><p>The <code>withHelp</code> method, along with its specific <code>withShortDescription</code> and <code>withFullDescription</code> methods are used to declare the help topic for this command which is displayed in the <code>/help</code> command. (See <a href="./help">the section on help</a> for more info).</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CommandAPICommand </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withSubcommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CommandAPICommand subcommand)</span></span></code></pre></div><p>The <code>withSubcommand</code> method is used to declare a subcommand that leads on from the current command. (See <a href="./subcommands">the section on subcommands</a> for more info).</p>`,12)),e(n,{anchor:"setting-the-commands-executor"},{default:t(()=>i[6]||(i[6]=[s("h4",{id:"setting-the-commands-executor",tabindex:"-1"},[a("Setting the command's executor "),s("a",{class:"header-anchor",href:"#setting-the-commands-executor","aria-label":`Permalink to "Setting the command's executor"`},"â€‹")],-1)])),_:1}),i[15]||(i[15]=h(`<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CommandAPICommand </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((sender, args) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CommandAPICommand </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {})</span></span></code></pre></div><p>Executes a command using the <code>CommandSender</code> object.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CommandAPICommand </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executesPlayer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((player, args) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CommandAPICommand </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executesPlayer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {})</span></span></code></pre></div><p>Executes a command only if the command sender is a <code>Player</code>.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CommandAPICommand </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executesEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((entity, args) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CommandAPICommand </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executesEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {})</span></span></code></pre></div><p>Executes a command only if the command sender is an <code>Entity</code>.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CommandAPICommand </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executesCommandBlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((cmdblock, args) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CommandAPICommand </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executesCommandBlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {})</span></span></code></pre></div><p>Executes a command only if the command sender is a <code>BlockCommandSender</code>.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CommandAPICommand </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executesConsole</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((console, args) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CommandAPICommand </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executesConsole</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {})</span></span></code></pre></div><p>Executes a command only if the command sender is a <code>ConsoleCommandSender</code>.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CommandAPICommand </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executesProxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((proxy, args) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CommandAPICommand </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executesProxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {})</span></span></code></pre></div><p>Executes a command only if the command sender is a <code>ProxiedCommandSender</code>.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CommandAPICommand </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executesNative</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((proxy, args) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CommandAPICommand </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executesNative</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {})</span></span></code></pre></div><p>Executes a command regardless of what the command sender is, using the <code>NativeProxyCommandSender</code>. Read more about native proxied command senders <a href="./executors/native-sender">here</a>.</p><div class="info custom-block"><p class="custom-block-title"><strong>Developer&#39;s Note:</strong></p><p>Sometimes, the Java compiler throws an error saying that a method is ambiguous for the type CommandAPICommand. This is due to a limitation in Java&#39;s type inference system and is not a fault of the CommandAPI. If we take the following code, used to spawn a pig:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CommandAPICommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;spawnpigs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executesPlayer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((player, args) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               player.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getWorld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">spawnEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(player.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLocation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), (EntityType) args.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>The Java type inference system canâ€™t determine what the type of the lambda <code>(player, args) -&gt; ()</code> is, therefore, it produces the following compilation error:</p><div class="language-log vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">log</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">The method executesPlayer(PlayerCommandExecutor) is ambiguous for the type CommandAPICommand</span></span></code></pre></div><p>This can easily be resolved by declaring the specific type of the command sender and the arguments. For example:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CommandAPICommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;spawnpigs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executesPlayer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((Player player, CommandArguments args) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               player.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getWorld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">spawnEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(player.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLocation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), (EntityType) args.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div></div>`,15)),e(n,{anchor:"registering-the-command"},{default:t(()=>i[7]||(i[7]=[s("h4",{id:"registering-the-command",tabindex:"-1"},[a("Registering the command "),s("a",{class:"header-anchor",href:"#registering-the-command","aria-label":'Permalink to "Registering the command"'},"â€‹")],-1)])),_:1}),i[16]||(i[16]=h('<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Registers the command with the default <code>minecraft</code> namespace. If you are <a href="./../dev-setup/shading">shading</a> you can set the default namespace using <code>CommandAPIConfig#setNamespace(String)</code> or <code>CommandAPIBukkitConfig#usePluginNamespace()</code>.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String namespace)</span></span></code></pre></div><p>Register the command with a custom-provided namespace.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JavaPlugin plugin)</span></span></code></pre></div><p>Register the command with the provided plugin&#39;s name.</p>',6)),e(n,{anchor:"command-loading-order"},{default:t(()=>i[8]||(i[8]=[s("h2",{id:"command-loading-order",tabindex:"-1"},[a("Command loading order "),s("a",{class:"header-anchor",href:"#command-loading-order","aria-label":'Permalink to "Command loading order"'},"â€‹")],-1)])),_:1}),i[17]||(i[17]=h('<p>It is recommended to register commands in either the <code>onLoad()</code> or <code>onEnable()</code> method. With the CommandAPI, depending on whether you use <code>onLoad()</code> or <code>onEnable()</code> to load your commands depends on whether your plugin is used with Minecraft&#39;s functions:</p><table tabindex="0"><thead><tr><th>When to load</th><th>What to do</th></tr></thead><tbody><tr><td><code>onLoad()</code> method</td><td>Register commands to be used in Minecraft functions (<a href="./functions-and-tags/functions">see the Function section for more info</a>)</td></tr><tr><td><code>onEnable()</code> method</td><td>Register regular commands</td></tr></tbody></table><p>The CommandAPI does support registering commands outside of these methods while the server is running. Commands registered after the server is done loading <em>should</em> work the same as commands registered in <code>onEnable</code>.</p>',3))])}const b=k(E,[["render",g]]);export{v as __pageData,b as default};
