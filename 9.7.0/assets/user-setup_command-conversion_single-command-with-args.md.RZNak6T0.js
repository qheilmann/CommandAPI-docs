import{_ as r,C as p,c as d,o as n,G as o,j as e,am as s,w as l,a}from"./chunks/framework.DAr4A1sI.js";const c="/9.7.0/images/speedoptions.png",m="/9.7.0/images/speedlimit.png",P=JSON.parse('{"title":"Single command conversion (with arguments)","description":"","frontmatter":{"order":3,"authors":["misode","JorelAli"]},"headers":[],"relativePath":"user-setup/command-conversion/single-command-with-args.md","filePath":"en/user-setup/command-conversion/single-command-with-args.md","lastUpdated":1742050500000}'),h={name:"user-setup/command-conversion/single-command-with-args.md"},g={style:{height:"0",color:"rgba(0,0,0,0%)",position:"relative",top:"32px"}},Q={style:{height:"0",color:"rgba(0,0,0,0%)",position:"relative",top:"32px"}},u={class:"tip custom-block"},T={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},k={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.312ex"},xmlns:"http://www.w3.org/2000/svg",width:"10.722ex",height:"1.819ex",role:"img",focusable:"false",viewBox:"0 -666 4739.1 804","aria-hidden":"true"},y={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},b={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.312ex"},xmlns:"http://www.w3.org/2000/svg",width:"6.574ex",height:"1.819ex",role:"img",focusable:"false",viewBox:"0 -666 2905.6 804","aria-hidden":"true"},x={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},f={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.312ex"},xmlns:"http://www.w3.org/2000/svg",width:"6.574ex",height:"1.819ex",role:"img",focusable:"false",viewBox:"0 -666 2905.6 804","aria-hidden":"true"},w={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},v={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.312ex"},xmlns:"http://www.w3.org/2000/svg",width:"9.591ex",height:"1.819ex",role:"img",focusable:"false",viewBox:"0 -666 4239.1 804","aria-hidden":"true"},_={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},E={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.294ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 572 453","aria-hidden":"true"},A={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},C={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.294ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 572 453","aria-hidden":"true"};function F(M,t,H,S,V,B){const i=p("TitleAnchor");return n(),d("div",null,[o(i,{anchor:"single-command-conversion-with-arguments"},{default:l(()=>t[0]||(t[0]=[e("h1",{id:"single-command-conversion-with-arguments",tabindex:"-1"},[a("Single command conversion (with arguments) "),e("a",{class:"header-anchor",href:"#single-command-conversion-with-arguments","aria-label":'Permalink to "Single command conversion (with arguments)"'},"​")],-1)])),_:1}),t[36]||(t[36]=e("p",null,"For even finer control when converting a single command, you can provide the list of arguments that are required to run the command! This lets you use the command UI in converted commands as you see fit. Before we explain how to do this in detail, let's first take a look at an example of this in action.",-1)),e("div",g,[o(i,{anchor:"example-converting-essentials-xs-speed-command"},{default:l(()=>t[1]||(t[1]=[e("h3",{id:"example-converting-essentials-xs-speed-command",class:"example-title-anchor",style:{"-webkit-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none"}},[a("Example - Converting EssentialsX's /speed command "),e("a",{class:"header-anchor",href:"#example-converting-essentials-xs-speed-command"},"​")],-1)])),_:1})]),t[37]||(t[37]=s(`<div class="tip custom-block"><p class="custom-block-title">Example - Converting EssentialsX&#39;s /speed command</p><p>EssentialsX includes a command <code>/speed</code> which lets you change the current speed that a player can move at. The command format is the following:</p><div class="language-mccmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mccmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">speed</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> &lt;speed&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">speed</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> &lt;speed&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> &lt;target&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">speed</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> &lt;walk/fly&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> &lt;speed&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">speed</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> &lt;walk/fly&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> &lt;speed&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> &lt;target&gt;</span></span></code></pre></div><p>Which means you can run any of the following commands:</p><div class="language-mccmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mccmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">speed</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> 5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">speed</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Notch</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">speed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fly </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">6</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">speed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> walk </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Notch</span></span></code></pre></div><p>By looking at this, we can see that:</p><ul><li><code>&lt;speed&gt;</code> is a number. By using the command, we can determine that the range of values is between 0 and 10 (inclusive).</li><li><code>&lt;target&gt;</code> is a player</li><li><code>&lt;walk/fly&gt;</code> don&#39;t change – these are &quot;fixed&quot; values.</li></ul><p>We can represent this using the following <code>config.yml</code> file:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">verbose-outputs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">create-dispatcher-json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugins-to-convert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Essentials</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">speed &lt;speed&gt;[0..10]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">speed &lt;target&gt;[minecraft:game_profile]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">speed (walk|fly) &lt;speed&gt;[0..10]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">speed (walk|fly) &lt;speed&gt;[0..10] &lt;target&gt;[minecraft:game_profile]</span></span></code></pre></div><p>Using this, we can display options, such as &quot;fly&quot; and &quot;walk&quot;, as well as optional targets (&quot;Skepter&quot;):</p><p><img src="`+c+'" alt="A command &quot;/execute run speed&quot; with argument suggestions for entity selectors, as well as &quot;fly&quot; and &quot;walk&quot;"></p><p>Additionally, we can apply limits to the numbers that can be provided. For example, here we limit the number to a value between 0 and 10. If a value is outside of that range, and error is shown to the user:</p><p><img src="'+m+'" alt="A command &quot;/execute run speed walk 15&quot; with an error displaying "></p></div>',1)),o(i,{anchor:"command-argument-syntax"},{default:l(()=>t[2]||(t[2]=[e("h2",{id:"command-argument-syntax",tabindex:"-1"},[a("Command argument syntax "),e("a",{class:"header-anchor",href:"#command-argument-syntax","aria-label":'Permalink to "Command argument syntax"'},"​")],-1)])),_:1}),t[38]||(t[38]=e("p",null,"The argument syntax is a little tricky to get the hang of at the beginning, but it should be fairly straight forward. There are two main types of arguments that you can have:",-1)),o(i,{anchor:"literal-arguments"},{default:l(()=>t[3]||(t[3]=[e("h3",{id:"literal-arguments",tabindex:"-1"},[a("Literal arguments "),e("a",{class:"header-anchor",href:"#literal-arguments","aria-label":'Permalink to "Literal arguments"'},"​")],-1)])),_:1}),t[39]||(t[39]=s('<p>Literal arguments are arguments with &quot;fixed&quot; values, such as <code>walk</code> or <code>fly</code> from our example above. To declare a literal value, place brackets around the value. For example:</p><div class="language-mccmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mccmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(walk)</span></span></code></pre></div><p>To have multiple different literals, place a pipe symbol <code>|</code> between each entry within the brackets. For example:</p><div class="language-mccmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mccmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(walk|fly)</span></span></code></pre></div>',4)),o(i,{anchor:"named-arguments"},{default:l(()=>t[4]||(t[4]=[e("h3",{id:"named-arguments",tabindex:"-1"},[a("Named arguments "),e("a",{class:"header-anchor",href:"#named-arguments","aria-label":'Permalink to "Named arguments"'},"​")],-1)])),_:1}),t[40]||(t[40]=s('<p>Named arguments must have a name, declared in angled brackets <code>&lt;name&gt;</code>, followed by the type of the argument in square brackets <code>[type]</code>. In the example above, we had a named argument <code>&lt;target&gt;</code>, with the argument type as a player: <code>[minecraft:game_profile]</code>.</p><p>The name in the argument can be whatever you want, but it is recommended to keep it as a lowercase value consisting only of letters.</p><p><strong>The following argument types are highly recommended</strong> and are very likely to be compatible with every plugin command that you may want to convert:</p><table tabindex="0"><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>api:entity</code></td><td>An single entity (e.g. <code>@e[limit=1]</code>)</td></tr><tr><td><code>api:entities</code></td><td>Many entities (e.g. <code>@e</code>)</td></tr><tr><td><code>api:player</code></td><td>A single player (e.g. <code>Notch</code> or <code>@r</code>)</td></tr><tr><td><code>api:players</code></td><td>Many players (e.g. <code>@a</code>)</td></tr><tr><td><code>api:greedy_string</code></td><td>An unlimited amount of text. This can only be used as the last entry of a list of arguments</td></tr><tr><td><code>brigadier:bool</code></td><td>A Boolean value <code>true</code> or <code>false</code></td></tr><tr><td><code>brigadier:double</code></td><td>A decimal number</td></tr><tr><td><code>brigadier:float</code></td><td>A decimal number</td></tr><tr><td><code>brigadier:integer</code></td><td>A whole number</td></tr><tr><td><code>brigadier:long</code></td><td>A whole number</td></tr><tr><td><code>brigadier:string</code></td><td>A single word</td></tr><tr><td><code>minecraft:block_pos</code></td><td>A location of x, y and z coordinates (whole numbers)</td></tr></tbody></table><p>In the example above, we used the &quot;range type&quot; in the form <code>[0..10]</code>. This is a special argument type that will conform to <code>brigader:long</code> or <code>brigader:double</code> and apply a limit to the values that can be entered.</p>',5)),e("div",Q,[o(i,{anchor:"example-declaring-range-type-arguments"},{default:l(()=>t[5]||(t[5]=[e("h3",{id:"example-declaring-range-type-arguments",class:"example-title-anchor",style:{"-webkit-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none"}},[a('Example – Declaring "range type" arguments '),e("a",{class:"header-anchor",href:"#example-declaring-range-type-arguments"},"​")],-1)])),_:1})]),e("div",u,[t[29]||(t[29]=e("p",{class:"custom-block-title"},'Example – Declaring "range type" arguments',-1)),e("p",null,[t[8]||(t[8]=a("To declare the range ")),e("mjx-container",T,[(n(),d("svg",k,t[6]||(t[6]=[s('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1833.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(2683.3,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(3739.1,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" style="stroke-width:3;"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)" style="stroke-width:3;"></path></g></g></g>',1)]))),t[7]||(t[7]=e("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("mn",null,"0"),e("mo",null,"≤"),e("mi",null,"x"),e("mo",null,"≤"),e("mn",null,"50")])],-1))]),t[9]||(t[9]=a(" (a value must be between 10 and 50 (inclusive)):"))]),t[30]||(t[30]=s('<div class="language-mccmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mccmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&lt;name&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[10..50]</span></span></code></pre></div>',1)),e("p",null,[t[12]||(t[12]=a("To declare the range ")),e("mjx-container",y,[(n(),d("svg",b,t[10]||(t[10]=[s('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(1277.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2333.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width:3;"></path></g></g></g>',1)]))),t[11]||(t[11]=e("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("mn",null,"10"),e("mo",null,"≤"),e("mi",null,"x")])],-1))]),t[13]||(t[13]=a(" (a value must be bigger than or equal to 10):"))]),t[31]||(t[31]=s('<div class="language-mccmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mccmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&lt;name&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[10..]</span></span></code></pre></div>',1)),e("p",null,[t[16]||(t[16]=a("To declare the range ")),e("mjx-container",x,[(n(),d("svg",f,t[14]||(t[14]=[s('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(1905.6,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" style="stroke-width:3;"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)" style="stroke-width:3;"></path></g></g></g>',1)]))),t[15]||(t[15]=e("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("mi",null,"x"),e("mo",null,"≤"),e("mn",null,"50")])],-1))]),t[17]||(t[17]=a(" (a value must be less than or equal to 50):"))]),t[32]||(t[32]=s('<div class="language-mccmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mccmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&lt;name&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[..50]</span></span></code></pre></div>',1)),e("p",null,[t[22]||(t[22]=a("To declare the range ")),e("mjx-container",w,[(n(),d("svg",v,t[18]||(t[18]=[s('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1833.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(2683.3,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(3739.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g></g></g>',1)]))),t[19]||(t[19]=e("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("mn",null,"0"),e("mo",null,"≤"),e("mi",null,"x"),e("mo",null,"≤"),e("mn",null,"1")])],-1))]),t[23]||(t[23]=a(", where ")),e("mjx-container",_,[(n(),d("svg",E,t[20]||(t[20]=[e("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[e("g",{"data-mml-node":"math"},[e("g",{"data-mml-node":"mi"},[e("path",{"data-c":"1D465",d:"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z",style:{"stroke-width":"3"}})])])],-1)]))),t[21]||(t[21]=e("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("mi",null,"x")])],-1))]),t[24]||(t[24]=a(" is a decimal value:"))]),t[33]||(t[33]=s('<div class="language-mccmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mccmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&lt;name&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[0.0..1.0]</span></span></code></pre></div>',1)),e("p",null,[t[27]||(t[27]=a("To declare a value ")),e("mjx-container",A,[(n(),d("svg",C,t[25]||(t[25]=[e("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[e("g",{"data-mml-node":"math"},[e("g",{"data-mml-node":"mi"},[e("path",{"data-c":"1D465",d:"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z",style:{"stroke-width":"3"}})])])],-1)]))),t[26]||(t[26]=e("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("mi",null,"x")])],-1))]),t[28]||(t[28]=a(" that can take any range of values and is a decimal number:"))]),t[34]||(t[34]=s('<div class="language-mccmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mccmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&lt;name&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[brigadier:double]</span></span></code></pre></div>',1))]),o(i,{anchor:"list-of-all-supported-argument-types"},{default:l(()=>t[35]||(t[35]=[e("h2",{id:"list-of-all-supported-argument-types",tabindex:"-1"},[a("List of all supported argument types "),e("a",{class:"header-anchor",href:"#list-of-all-supported-argument-types","aria-label":'Permalink to "List of all supported argument types"'},"​")],-1)])),_:1}),t[41]||(t[41]=s('<p>The list of types is based on <a href="https://minecraft.wiki/w/Argument_types" target="_blank" rel="noreferrer">the list of argument types from the Minecraft Wiki</a>, with a few changes. The complete list that the CommandAPI supports is as follows:</p><table tabindex="0"><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>api:advancement</code></td><td>An advancement</td></tr><tr><td><code>api:biome</code></td><td>A biome</td></tr><tr><td><code>api:entity</code></td><td>An single entity (e.g. <code>@e[limit=1]</code>)</td></tr><tr><td><code>api:entities</code></td><td>Many entities (e.g. <code>@e</code>)</td></tr><tr><td><code>api:greedy_string</code></td><td>An unlimited amount of text. This can only be used as the last entry of a list of arguments</td></tr><tr><td><code>api:loot_table</code></td><td>A loot table</td></tr><tr><td><code>api:player</code></td><td>A single player (e.g. <code>Notch</code> or <code>@r</code>)</td></tr><tr><td><code>api:players</code></td><td>Many players (e.g. <code>@a</code>)</td></tr><tr><td><code>api:recipe</code></td><td>A recipe</td></tr><tr><td><code>api:sound</code></td><td>A sound effect</td></tr><tr><td><code>api:text</code></td><td>Text encased in quotes: <code>&quot;text with spaces&quot;</code></td></tr><tr><td><code>brigadier:bool</code></td><td>A Boolean value <code>true</code> or <code>false</code></td></tr><tr><td><code>brigadier:double</code></td><td>A decimal number</td></tr><tr><td><code>brigadier:float</code></td><td>A decimal number</td></tr><tr><td><code>brigadier:integer</code></td><td>A whole number</td></tr><tr><td><code>brigadier:long</code></td><td>A whole number</td></tr><tr><td><code>brigadier:string</code></td><td>A single word</td></tr><tr><td><code>minecraft:angle</code></td><td>A yaw angle in degrees (from -180.0 to 179.9)</td></tr><tr><td><code>minecraft:block_pos</code></td><td>A location of x, y and z coordinates (whole numbers)</td></tr><tr><td><code>minecraft:block_predicate</code></td><td>A block predicate</td></tr><tr><td><code>minecraft:block_state</code></td><td>A block type (e.g. <code>stone</code>)</td></tr><tr><td><code>minecraft:color</code></td><td>A chat color (e.g. <code>red</code>, <code>green</code>)</td></tr><tr><td><code>minecraft:column_pos</code></td><td>A location of x and z coordinates (whole numbers)</td></tr><tr><td><code>minecraft:component</code></td><td>Raw JSON text</td></tr><tr><td><code>minecraft:dimension</code></td><td>A dimension/world, (e.g. <code>minecraft:overworld</code>)</td></tr><tr><td><code>minecraft:entity</code></td><td>An entity (e.g. <code>Notch</code>)</td></tr><tr><td><code>minecraft:entity_summon</code></td><td>An entity type (e.g. <code>cow</code>, <code>wither</code>)</td></tr><tr><td><code>minecraft:float_range</code></td><td>A range of decimal numbers</td></tr><tr><td><code>minecraft:function</code></td><td>A datapack function</td></tr><tr><td><code>minecraft:game_profile</code></td><td>A player (e.g. <code>Notch</code>)</td></tr><tr><td><code>minecraft:int_range</code></td><td>A range of whole numbers</td></tr><tr><td><code>minecraft:item_enchantment</code></td><td>An enchantment (e.g. <code>unbreaking</code>)</td></tr><tr><td><code>minecraft:item_predicate</code></td><td>An item predicate</td></tr><tr><td><code>minecraft:item_stack</code></td><td>An item (e.g. <code>stick</code>)</td></tr><tr><td><code>minecraft:message</code></td><td>A plain text message which can have target selectors (e.g. <code>Hello @p</code>). This can only be used as the last entry of a list of arguments</td></tr><tr><td><code>minecraft:mob_effect</code></td><td>A potion effect (e.g. <code>speed</code>, <code>jump_boost</code>)</td></tr><tr><td><code>minecraft:nbt_compound_tag</code></td><td>Raw compound NBT in SNBT format</td></tr><tr><td><code>minecraft:objective</code></td><td>An objective name (e.g. <code>temperature</code>)</td></tr><tr><td><code>minecraft:objective_criteria</code></td><td>An objective criteria (e.g. <code>deaths</code>)</td></tr><tr><td><code>minecraft:operation</code></td><td>An operation symbol (e.g. <code>+=</code>, <code>*=</code>)</td></tr><tr><td><code>minecraft:particle</code></td><td>A particle (e.g. <code>crit</code>, <code>flame</code>)</td></tr><tr><td><code>minecraft:rotation</code></td><td>A rotation of yaw and pitch values (e.g. <code>~ ~</code>)</td></tr><tr><td><code>minecraft:score_holder</code></td><td>A score holder (e.g. <code>Notch</code>)</td></tr><tr><td><code>minecraft:scoreboard_slot</code></td><td>A scoreboard slot (e.g. <code>sidebar</code>)</td></tr><tr><td><code>minecraft:swizzle</code></td><td>A collection of axes (e.g. <code>xyz</code>, <code>xz</code>)</td></tr><tr><td><code>minecraft:team</code></td><td>A team name (e.g. <code>hunters</code>)</td></tr><tr><td><code>minecraft:time</code></td><td>A duration of time (e.g. <code>2d</code>)</td></tr><tr><td><code>minecraft:uuid</code></td><td>A UUID (e.g. <code>dd12be42-52a9-4a91-a8a1-11c01849e498</code>)</td></tr><tr><td><code>minecraft:vec2</code></td><td>A location of x and z coordinates (decimal numbers)</td></tr><tr><td><code>minecraft:vec3</code></td><td>A location of x, y and z coordinates (decimal numbers)</td></tr></tbody></table>',2))])}const I=r(h,[["render",F]]);export{P as __pageData,I as default};
