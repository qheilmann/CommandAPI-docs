import{_ as k,C as d,c as r,o as c,G as a,am as n,j as s,w as t,a as e}from"./chunks/framework.DAr4A1sI.js";const x=JSON.parse('{"title":"Native command senders","description":"","frontmatter":{"order":4,"authors":["DerEchtePilz","willkroboth","JorelAli"]},"headers":[],"relativePath":"create-commands/executors/native-sender.md","filePath":"en/create-commands/executors/native-sender.md","lastUpdated":1742050500000}'),p={name:"create-commands/executors/native-sender.md"},E={style:{height:"0",color:"rgba(0,0,0,0%)",position:"relative",top:"32px"}},g={class:"tip custom-block"};function m(y,i,u,b,F,C){const l=d("TitleAnchor"),h=d("PluginTabsTab"),o=d("PluginTabs");return c(),r("div",null,[a(l,{anchor:"native-command-senders"},{default:t(()=>i[0]||(i[0]=[s("h1",{id:"native-command-senders",tabindex:"-1"},[e("Native command senders "),s("a",{class:"header-anchor",href:"#native-command-senders","aria-label":'Permalink to "Native command senders"'},"​")],-1)])),_:1}),i[9]||(i[9]=n(`<p>In a similar way that the <code>ProxiedCommandSender</code> is used to store information about two command senders: a caller (the one that wrote the command) and a callee (the one that ends up executing the command), the CommandAPI also has a special <code>NativeProxyCommandSender</code> class which is a more powerful representation of the <code>ProxiedCommandSender</code> class. In addition to inheriting all of the methods from <code>ProxiedCommandSender</code>, this class also has the following two methods:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> World </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getWorld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Location </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLocation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>These methods contain additional information about the command executor&#39;s state, and are primarily designed to be used with Minecraft&#39;s <code>/execute</code> command.</p>`,3)),a(l,{anchor:"minecrafts-execute-arguments"},{default:t(()=>i[1]||(i[1]=[s("h2",{id:"minecrafts-execute-arguments",tabindex:"-1"},[e("Minecraft's "),s("code",null,"/execute"),e(" arguments "),s("a",{class:"header-anchor",href:"#minecrafts-execute-arguments","aria-label":'Permalink to "Minecraft\'s `/execute` arguments"'},"​")],-1)])),_:1}),i[10]||(i[10]=n('<p>The following table represents how the different <code>/execute</code> arguments affect the <code>NativeProxyCommandSender</code> class:</p><table tabindex="0"><thead><tr><th>/execute argument</th><th>How it changes NativeProxyCommandSender</th></tr></thead><tbody><tr><td><code>/execute align</code></td><td>Changes <code>getLocation()</code> only</td></tr><tr><td><code>/execute anchored</code></td><td>Changes nothing</td></tr><tr><td><code>/execute as</code></td><td>Changes <code>getCallee()</code> only</td></tr><tr><td><code>/execute at</code></td><td>Changes <code>getLocation()</code> and <code>getWorld()</code> only</td></tr><tr><td><code>/execute facing</code></td><td>Changes <code>getLocation()</code> only</td></tr><tr><td><code>/execute in</code></td><td>Changes <code>getWorld()</code> only</td></tr><tr><td><code>/execute positioned</code></td><td>Changes <code>getLocation()</code> only</td></tr><tr><td><code>/execute rotated</code></td><td>Changes <code>getLocation()</code>only</td></tr></tbody></table>',2)),a(l,{anchor:"using-the-native-command-sender"},{default:t(()=>i[2]||(i[2]=[s("h2",{id:"using-the-native-command-sender",tabindex:"-1"},[e("Using the native CommandSender "),s("a",{class:"header-anchor",href:"#using-the-native-command-sender","aria-label":'Permalink to "Using the native CommandSender"'},"​")],-1)])),_:1}),i[11]||(i[11]=n('<p>As described in the section about <a href="./normal-executors">normal command executors</a>, there are multiple methods to register a command executor. For the <code>NativeProxyCommandSender</code>, the <code>.executesNative()</code> method should be used.</p><div class="info custom-block"><p class="custom-block-title"><strong>Developer&#39;s Note:</strong></p><p>The <code>.executesNative()</code> method has the highest priority over all over <code>.executesXXX()</code> methods - if you use the <code>.executesNative()</code> method, no other execution method will be run.</p></div>',2)),s("div",E,[a(l,{anchor:"example-a-really-simple-break-block-command"},{default:t(()=>i[3]||(i[3]=[s("h3",{id:"example-a-really-simple-break-block-command",class:"example-title-anchor",style:{"-webkit-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none"}},[e('Example – A really simple "break block" command '),s("a",{class:"header-anchor",href:"#example-a-really-simple-break-block-command"},"​")],-1)])),_:1})]),s("div",g,[i[7]||(i[7]=n('<p class="custom-block-title">Example – A really simple &quot;break block&quot; command</p><p>Say we wanted to make a command that simply sets the current block to air. For this example, we&#39;ll use the following command syntax:</p><div class="language-mccmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mccmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">break</span></span></code></pre></div><p>As you can see, this command takes no arguments. This is fine, since our &quot;argument&quot; will be the sender&#39;s location. We can access the sender&#39;s location using the <code>getLocation()</code> method from the <code>NativeProxyCommandSender</code> object, available from the <code>.executesNative()</code> method:</p>',4)),a(o,{sharedStateKey:"tabs-3"},{default:t(()=>[a(h,{label:"Java"},{default:t(()=>i[4]||(i[4]=[s("div",{class:"language-java vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"java"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"new"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," CommandAPICommand"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"break"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"executesNative"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"((sender, args) "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"->"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        Location location "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," sender."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"getLocation"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        if"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," (location "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"!="),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," null"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            location."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"getBlock"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"breakNaturally"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    })")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"register"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")])])])],-1)])),_:1}),a(h,{label:"Kotlin"},{default:t(()=>i[5]||(i[5]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"CommandAPICommand"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"break"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"executesNative"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"NativeCommandExecutor"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," { sender, _ "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"->")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        val"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," location "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," sender.location")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        location.block."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"breakNaturally"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    })")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"register"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")])])])],-1)])),_:1}),a(h,{label:"Kotlin DSL"},{default:t(()=>i[6]||(i[6]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"commandAPICommand"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"break"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    nativeExecutor"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," { sender, _ "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"->")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        val"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," location "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," sender.location")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        location.block."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"breakNaturally"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),e(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),i[8]||(i[8]=n(`<p>This can now be used via the following command examples:</p><div class="language-mccmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mccmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">execute</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> positioned</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> 100</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> 62</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> 50</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> break</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">execute</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> at</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> @e[type=pig]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> break</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">execute</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> minecraft:overworld </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">positioned</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> 20</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> 60</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> -20</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> break</span></span></code></pre></div>`,2))])])}const _=k(p,[["render",m]]);export{x as __pageData,_ as default};
