import{_ as h,C as p,c as d,o,G as e,am as l,w as t,j as i,a as n}from"./chunks/framework.DEPJlf-V.js";const C=JSON.parse('{"title":"Testing Utilities","description":"","frontmatter":{"order":4,"authors":["willkroboth"]},"headers":[],"relativePath":"test/utils.md","filePath":"en/test/utils.md","lastUpdated":1743375413000}'),r={name:"test/utils.md"};function k(g,s,c,m,E,u){const a=p("TitleAnchor");return o(),d("div",null,[e(a,{anchor:"testing-utilities"},{default:t(()=>s[0]||(s[0]=[i("h1",{id:"testing-utilities",tabindex:"-1"},[n("Testing Utilities "),i("a",{class:"header-anchor",href:"#testing-utilities","aria-label":'Permalink to "Testing Utilities"'},"​")],-1)])),_:1}),s[6]||(s[6]=l(`<p>The class <code>CommandAPITestUtilities</code> provides many static methods to interact with commands registered in the test environment. The standard way to access these methods is by using the class name.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dev.jorel.commandapi.CommandAPITestUtilities;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tests</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        CommandAPITestUtilities.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assertCommandSucceeds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(...);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>However, you can also call these methods with just the method name if you add a static import:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dev.jorel.commandapi.CommandAPITestUtilities.assertCommandSucceeds;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tests</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        assertCommandSucceeds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(...);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>or make your test class extend <code>CommandAPITestUtilities</code>:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dev.jorel.commandapi.CommandAPITestUtilities;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tests</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CommandAPITestUtilties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        assertCommandSucceeds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(...);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>This is similar to importing static methods from the <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-assertions" target="_blank" rel="noreferrer"><code>org.junit.jupiter.api.Assertions</code></a> class, and may help make your tests easier to read.</p>`,7)),e(a,{anchor:"running-commands"},{default:t(()=>s[1]||(s[1]=[i("h2",{id:"running-commands",tabindex:"-1"},[n("Running commands "),i("a",{class:"header-anchor",href:"#running-commands","aria-label":'Permalink to "Running commands"'},"​")],-1)])),_:1}),s[7]||(s[7]=l(`<p>There are three methods to test basic command execution:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dispatchCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CommandSender sender, String command) throws CommandSyntaxException</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> assertCommandSucceeds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CommandSender sender, String command)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CommandSyntaxException </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assertCommandFails</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CommandSender sender, String command, String expectedMessage)</span></span></code></pre></div><p><code>dispatchCommand</code> will simply attempt to execute a command. It may throw a <code>CommandSyntaxException</code> if the command fails, either because it wasn&#39;t a valid command or because your command executor threw a <a href="./../create-commands/executors/handle-failures#handle-command-failures"><code>WrapperCommandSyntaxException</code></a>.</p><p><code>assertCommandSucceeeds</code> will run <code>dispatchCommand</code> and cause the test to fail if the command fails for any reason.</p><p><code>assertCommandFails</code> will run <code>dispatchCommand</code> and cause the test to fail if the command does <em>not</em> throw a <code>CommandSyntaxException</code>. This method will also fail if the command throws an exception but with a different error message than the <code>expectedMessage</code> String. It returns the <code>CommandSyntaxException</code> that was caught in case you want to inspect any other features of the exception.</p>`,5)),e(a,{anchor:"verifying-arguments"},{default:t(()=>s[2]||(s[2]=[i("h2",{id:"verifying-arguments",tabindex:"-1"},[n("Verifying arguments "),i("a",{class:"header-anchor",href:"#verifying-arguments","aria-label":'Permalink to "Verifying arguments"'},"​")],-1)])),_:1}),s[8]||(s[8]=l(`<p>When a command is executed, you may want to assert that the Objects provided as arguments match your expectations. There are four basic methods for doing this:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> assertCommandSucceedsWithArguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CommandSender sender, String command, Object... argumentsArray)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> assertCommandSucceedsWithArguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CommandSender sender, String command, Map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String, Object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> argumentsMap)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> assertCommandFailsWithArguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CommandSender sender, String command, String expectedFailureMessage, Object... argumentsArray)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> assertCommandFailsWithArguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CommandSender sender, String command, String expectedFailureMessage, Map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String, Object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> argumentsMap)</span></span></code></pre></div><p>If you expect the command to succeed, use <code>assertCommandSucceedsWithArguments</code>. If you expect the command&#39;s executor to throw a <a href="./../create-commands/executors/handle-failures#handle-command-failures"><code>WrapperCommandSyntaxException</code></a>, use <code>assertCommandFailsWithArguments</code>. You can give these methods either an array or a Map holding all arguments you expect to be present for the command.</p><p>Note that if the command input cannot be parsed, the command will fail, but a CommandAPI executor will never be run. In this case, a CommandAPI executor will have never been run, so <code>assertCommandFailsWithArguments</code> will not have any arguments to inspect, and the test will fail. You can only successfully use <code>assertCommandFails</code> in this situation.</p>`,4)),e(a,{anchor:"verifying-suggestions"},{default:t(()=>s[3]||(s[3]=[i("h2",{id:"verifying-suggestions",tabindex:"-1"},[n("Verifying suggestions "),i("a",{class:"header-anchor",href:"#verifying-suggestions","aria-label":'Permalink to "Verifying suggestions"'},"​")],-1)])),_:1}),e(a,{anchor:"suggestion-texts"},{default:t(()=>s[4]||(s[4]=[i("h3",{id:"suggestion-texts",tabindex:"-1"},[n("Suggestion texts "),i("a",{class:"header-anchor",href:"#suggestion-texts","aria-label":'Permalink to "Suggestion texts"'},"​")],-1)])),_:1}),s[9]||(s[9]=l(`<p>There are four basic methods that may be used to verify the text of a command&#39;s suggestions:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> assertCommandSuggests</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CommandSender sender, String command, String... expectedSuggestions)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> assertCommandSuggests</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CommandSender sender, String command, List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expectedSuggestions)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> assertCommandSuggests</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CommandSender sender, String command, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> startingAt, String... expectedSuggestions)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> assertCommandSuggests</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CommandSender sender, String command, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> startingAt, List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expectedSuggestions)</span></span></code></pre></div><p>You can either provide the expected suggestions as an array or a List. Note that the suggestions will be provided in alphabetical order.</p><p>You can optionally provide a <code>startingAt</code> index. This is the place in the command String where you expect the first character of the suggestions will be placed.</p>`,4)),e(a,{anchor:"suggestion-tooltips"},{default:t(()=>s[5]||(s[5]=[i("h3",{id:"suggestion-tooltips",tabindex:"-1"},[n("Suggestion tooltips "),i("a",{class:"header-anchor",href:"#suggestion-tooltips","aria-label":'Permalink to "Suggestion tooltips"'},"​")],-1)])),_:1}),s[10]||(s[10]=l(`<p>If the suggestions you want to check include <a href="./../create-commands/arguments/suggestions/tooltips">tooltips</a>, you may use these five methods:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Suggestion </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">makeTooltip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String text, String tooltip);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> assertCommandSuggestsTooltips</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CommandSender sender, String command, Suggestion... expectedSuggestions)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> assertCommandSuggestsTooltips</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CommandSender sender, String command, List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Suggestion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expectedSuggestions)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> assertCommandSuggestsTooltips</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CommandSender sender, String command, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> startingAt, Suggestion... expectedSuggestions)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> assertCommandSuggestsTooltips</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CommandSender sender, String command, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> startingAt, List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Suggestion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expectedSuggestions)</span></span></code></pre></div><p>The 4 <code>assertCommandSuggestsTooltips</code> methods work the same as the <code>assertCommandSuggests</code> methods, but you provide <code>Suggestion</code> objects containing both the text and a tooltip. The <code>makeTooltip</code> method allows you to easily create these <code>Suggestion</code> objects.</p>`,3))])}const F=h(r,[["render",k]]);export{C as __pageData,F as default};
